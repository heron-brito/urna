# Source documentation example
# https://medium.com/flutter-community/automating-publishing-your-flutter-apps-to-google-play-using-github-actions-2f67ac582032
# Secrets necessÃ¡rias
# ANDROID_KEYSTORE_BASE64
# ANDROID_KEYSTORE_PASSWORD
# ANDROID_KEY_ALIAS
# ANDROID_KEY_PASSWORD
# ANDROID_PACKAGE_NAME
# GOOGLE_SERVICE_ACCOUNT_KEY

name: Flutter Auto Release
on:
  release:
    types: [published]
  push:
  #   branches: [ "main" ]
  pull_request:
  #   branches: [ "main" , "versao-1.0", "versao-2.0" , "versao-2.1"]    
# on:
#   schedule:
#     cron: '30 5 * * 1'  
# on:
#   workflow_dispatch:    
#     inputs:
#       logLevel:
#         description: 'Log level'
#         required: true
#         default: 'warning'
#         type: choice
#         options:
#         - info
#         - warning
#         - debug
#       tags:
#         description: 'Test scenario tags'
#         required: false
#         type: boolean
#       environment:
#         description: 'Environment to run tests against'
#         type: environment
#         required: true

jobs:
  release:
    name: Test, build and release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: |
          echo "Log level: $LEVEL"
          echo "Tags: $TAGS"
          echo "Environment: $ENVIRONMENT"
        env:
          LEVEL: ${{ inputs.logLevel }}
          TAGS: ${{ inputs.tags }}
          ENVIRONMENT: ${{ inputs.environment }}    
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: beta
      - name: Flutter version
        run: flutter --version

  # build:
  #   needs: [ dependencies ]
  #   name: Test, build and release
  #   runs-on: ubuntu-latest
  #   steps:
      - name: Cache pub dependencies
        uses: actions/cache@v2
        with:
          path: ${{ env.FLUTTER_HOME }}/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-
      - name: Download pub dependencies
        run: flutter pub get
      - name: Run build_runner
        run: flutter pub run build_runner build --delete-conflicting-outputs        
      - name: Run analyzer
        run: flutter analyze --no-fatal-infos --no-fatal-warnings --congratulate --preamble
      - name: Run tests
        run: flutter test -v
      - name: Build Android Apk
        run: flutter build apk     

  # publish:
  #   needs: [ build ]
  #   name: Release
  #   runs-on: ubuntu-latest
  #   steps:
      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.0.3
        with:
          fileName: key.jks
          encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}        
      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties          
      - name: Build Android App Bundle
        run: flutter build appbundle        

      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Cache bundle dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: ${{ runner.os }}-gems-
      - name: Download bundle dependencies
        run: |
          gem install bundler:2.0.2
          bundle config path vendor/bundle
          bundle install        
      - name: Release to Google Play (beta)
        env:
          SUPPLY_PACKAGE_NAME: ${{ secrets.ANDROID_PACKAGE_NAME }}
          SUPPLY_JSON_KEY_DATA: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        run: |
          bundle exec fastlane supply \
          --aab build/app/outputs/bundle/release/app-release.aab \
          --track beta